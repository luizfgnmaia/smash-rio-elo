---
title: "Sets"
output: html_notebook
---

```{r, warning = FALSE, message = FALSE}
library(dplyr)

source("json_to_df.R")
```

## Lendo os dados
```{r}
sets_raw = list.files("data/tournaments") %>%
  lapply(json_to_df) %>%
  do.call(rbind, .)
```

```{r}
save(sets_raw, file = "data/sets_raw.RData")
write.table(sets_raw, file = "data/sets_raw.csv", sep = ",", na = "", row.names = FALSE)
```

## Consertando as entradas duplicadas ou erradas:
```{r}
sets_fixed = sets_raw %>%
  filter(score1 >= 0, score2 >= 0) %>% # removendo os DQ
  rowwise() %>%
  mutate(first_to = max(score1, score2)) 
```

```{r}
fix_tag <- function(df, old_tag, new_tag, tournament = NULL) {
  if(!is.null(tournament)) {
    df$p1[which(df$p1 == old_tag & df$tournament == tournament)] = new_tag
    df$p2[which(df$p2 == old_tag & df$tournament == tournament)] = new_tag
  } else {
    df$p1[which(df$p1 == old_tag)] = new_tag
    df$p2[which(df$p2 == old_tag)] = new_tag
  }
  df
}
```

#### Funções auxiliares
```{r}
fix_set <- function(df, tournament, old_p1, old_score1, old_p2, old_score2, new_p1, new_score1, new_p2, new_score2) {
  row = which(df$tournament == tournament & df$p1 == old_p1 & df$score1 == old_score1 & df$p2 == old_p2 & df$score2 == old_score2)
  if(length(row) > 1) 
    return("Mais de um resultado, wtf?")
  df$p1[row] = new_p1
  df$score1[row] = new_score1
  df$p2[row] = new_p2
  df$score2[row] = new_score2
  df
}
```

```{r}
delete_set <- function(df, p1, score1, p2, score2, tournament) {
  row = which(df$tournament == tournament & df$p1 == p1 & df$score1 == score1 & df$p2 == p2 & df$score2 == score2)
  df[-row,]
}
```

```{r}
add_set <- function(df, p1, score1, p2, score2, completed, tournament, first_to) {
  tmp = tibble(p1 = p1, score1 = score1, p2 = p2, score2 = score2, completed = completed, tournament = tournament, first_to = first_to)
  df %>%
    rbind(tmp) %>%
    arrange(completed)
}
```

#### Aplicando essas funções

```{r}
prob1 = sets_fixed$p1[15]
prob2 = sets_fixed$p2[426]
prob3 = sets_fixed$p1[444]
prob4 = sets_fixed$p1[649]
```

```{r}
sets_fixed = sets_fixed %>%
  fix_tag(prob1, "Burtão") %>%
  fix_tag(prob2, "Chino") %>%
  fix_tag(prob3, "João Lagoas") %>%
  fix_tag(prob4, "Janjão") %>%
  fix_tag("ace", "Ace") %>%
  fix_tag("Amortaxx", "Amortax") %>%
  fix_tag("Burtao", "Burtão") %>%
  fix_tag("Dr. NEFÁRIO", "Chino") %>%
  fix_tag("Festa", "Fexta!") %>%
  fix_tag("Thi Festa", "Fexta!") %>%
  fix_tag("gamer girl", "Sky") %>%
  fix_tag("jao", "Jao") %>%
  fix_tag("Lugia", "LUGIA") %>%
  fix_tag("Monado", "Monad0") %>%
  fix_tag("Sahione Advogados", "Joaoarara") %>%
  fix_tag("Sem chance", "S/Chance") %>%
  fix_tag("ROT | Conker", "Conker") %>%
  fix_tag("ROT|Sully", "Sully") %>%
  fix_tag("FyFox", "Fy") %>%
  fix_tag("Oliveira", "Naval") %>%
  fix_tag("Conker", "Chadin", "Battle Of Hyrule") %>%
  fix_tag("MICK", "Mick") %>%
  fix_tag("Fexta!", "ThiFesta") %>%
  delete_set("FR7", 2, "Axe", 0, "Smash n' Magic - 5th Edition") %>%
  add_set("FR7", 2, "Naty", 1, 1573413191, "Smash n' Magic - 5th Edition", 2) %>%
  fix_set(tournament = "Smash n' Magic - 5th Edition", old_p1 = "FR7", old_score1 = 2, old_p2 = "Gim", 
          old_score2 = 1, new_p1 = "Axe", new_score1 = 0, new_p2 = "Gim", new_score2 = 2) %>%
  fix_set(tournament = "Smash n' Magic - 5th Edition", old_p1 = "Haxwei", old_score1 = 2, old_p2 = "Naty", 
          old_score2 = 0, new_p1 = "Haxwei", new_score1 = 2, new_p2 = "Gim", new_score2 = 0)  %>%
  fix_tag("UF| Ultimate", "Ultimate") %>%
  fix_tag("TB Chino", "Chino") %>%
  fix_tag("Gucci", "GUCCI") %>%
  fix_tag("OOPS", "Oops") %>%
  fix_tag("Firinplinplin", "FireEmblem") %>%
  fix_tag("JoJo Rama", "Jojorama") %>%
  fix_tag("DanielLopes", "Luffy") %>%
  fix_tag("Math100", "Mathe100") %>%
  fix_tag("L | Taunt", "Taunt") %>%
  fix_tag("Kage", "Shivan") %>%
  fix_tag("Shiv", "Shivan") %>%
  fix_tag("vinicius delfim", "DSK") %>%
  fix_tag("Jabs", "Fábio", "Try Hard Smash in Rio #6") %>%
  delete_set("RevoS", 2, "Chino", 0, "Beer Reversal #12 - Primeiro de 2020!") %>%
  delete_set("Chino", 0, "GabFon", 2, "Beer Reversal #12 - Primeiro de 2020!") %>%
  fix_tag("Arthunis", "Arthunnis") %>%
  fix_tag("Bike", "lamen", "Try Hard Smash in Rio #6") %>%
  fix_tag("Morkerz", "Morkez")
```

```{r}
save(sets_fixed, file = "data/sets_fixed.RData")
write.table(sets_fixed, file = "data/sets_fixed.csv", sep = ",", na = "", row.names = FALSE)
```

<hr>

## Contando número de participantes por campeonato
```{r}
tournaments = unique(sets_fixed$tournament)
part = NULL
for(i in 1:length(tournaments)) {
  s = sets_fixed %>%
    filter(tournament == tournaments[i])
  part[i] = length(unique(c(s$p1, s$p2)))
}
```

```{r}
participants = tibble(tournament = tournaments, participants = part)
save(participants, file = "data/participants.RData")
```

```{r}
participants[nrow(participants),]
```

## Verificando players novos
```{r}
last = unique(sets_fixed$tournament)[length(unique(sets_fixed$tournament))] # último campeonato

tmp = sets_fixed %>%
  filter(tournament != last)

players = unique(c(tmp$p1, tmp$p2))

tmp2 = sets_fixed %>%
  filter(tournament == last)

players_last = unique(c(tmp2$p1, tmp2$p2))

setdiff(players_last, players)
```

